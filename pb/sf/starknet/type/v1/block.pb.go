// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: sf/starknet/type/v1/block.proto

package pbstarknet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// specifies whether the data of this block is published via blob data or calldata
type L1_DA_MODE int32

const (
	L1_DA_MODE_L1_DA_MODE_UNKNOWN L1_DA_MODE = 0
	L1_DA_MODE_CALLDATA           L1_DA_MODE = 1
	L1_DA_MODE_BLOB               L1_DA_MODE = 2
)

// Enum value maps for L1_DA_MODE.
var (
	L1_DA_MODE_name = map[int32]string{
		0: "L1_DA_MODE_UNKNOWN",
		1: "CALLDATA",
		2: "BLOB",
	}
	L1_DA_MODE_value = map[string]int32{
		"L1_DA_MODE_UNKNOWN": 0,
		"CALLDATA":           1,
		"BLOB":               2,
	}
)

func (x L1_DA_MODE) Enum() *L1_DA_MODE {
	p := new(L1_DA_MODE)
	*p = x
	return p
}

func (x L1_DA_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L1_DA_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_starknet_type_v1_block_proto_enumTypes[0].Descriptor()
}

func (L1_DA_MODE) Type() protoreflect.EnumType {
	return &file_sf_starknet_type_v1_block_proto_enumTypes[0]
}

func (x L1_DA_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L1_DA_MODE.Descriptor instead.
func (L1_DA_MODE) EnumDescriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{0}
}

type FEE_DATA_AVAILABILITY_MODE int32

const (
	FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN FEE_DATA_AVAILABILITY_MODE = 0
	FEE_DATA_AVAILABILITY_MODE_L1                                 FEE_DATA_AVAILABILITY_MODE = 1
	FEE_DATA_AVAILABILITY_MODE_L2                                 FEE_DATA_AVAILABILITY_MODE = 2
)

// Enum value maps for FEE_DATA_AVAILABILITY_MODE.
var (
	FEE_DATA_AVAILABILITY_MODE_name = map[int32]string{
		0: "FEE_DATA_AVAILABILITY_MODE_UNKNOWN",
		1: "L1",
		2: "L2",
	}
	FEE_DATA_AVAILABILITY_MODE_value = map[string]int32{
		"FEE_DATA_AVAILABILITY_MODE_UNKNOWN": 0,
		"L1":                                 1,
		"L2":                                 2,
	}
)

func (x FEE_DATA_AVAILABILITY_MODE) Enum() *FEE_DATA_AVAILABILITY_MODE {
	p := new(FEE_DATA_AVAILABILITY_MODE)
	*p = x
	return p
}

func (x FEE_DATA_AVAILABILITY_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FEE_DATA_AVAILABILITY_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_starknet_type_v1_block_proto_enumTypes[1].Descriptor()
}

func (FEE_DATA_AVAILABILITY_MODE) Type() protoreflect.EnumType {
	return &file_sf_starknet_type_v1_block_proto_enumTypes[1]
}

func (x FEE_DATA_AVAILABILITY_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FEE_DATA_AVAILABILITY_MODE.Descriptor instead.
func (FEE_DATA_AVAILABILITY_MODE) EnumDescriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{1}
}

type TRANSACTION_TYPE int32

const (
	TRANSACTION_TYPE_TRANSACTION_TYPE_UNKNOWN TRANSACTION_TYPE = 0
	TRANSACTION_TYPE_INVOKE                   TRANSACTION_TYPE = 1
	TRANSACTION_TYPE_DECLARE                  TRANSACTION_TYPE = 2
	TRANSACTION_TYPE_DEPLOY                   TRANSACTION_TYPE = 3
	TRANSACTION_TYPE_DEPLOY_ACCOUNT           TRANSACTION_TYPE = 4
	TRANSACTION_TYPE_L1_HANDLER               TRANSACTION_TYPE = 5
)

// Enum value maps for TRANSACTION_TYPE.
var (
	TRANSACTION_TYPE_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNKNOWN",
		1: "INVOKE",
		2: "DECLARE",
		3: "DEPLOY",
		4: "DEPLOY_ACCOUNT",
		5: "L1_HANDLER",
	}
	TRANSACTION_TYPE_value = map[string]int32{
		"TRANSACTION_TYPE_UNKNOWN": 0,
		"INVOKE":                   1,
		"DECLARE":                  2,
		"DEPLOY":                   3,
		"DEPLOY_ACCOUNT":           4,
		"L1_HANDLER":               5,
	}
)

func (x TRANSACTION_TYPE) Enum() *TRANSACTION_TYPE {
	p := new(TRANSACTION_TYPE)
	*p = x
	return p
}

func (x TRANSACTION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRANSACTION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_starknet_type_v1_block_proto_enumTypes[2].Descriptor()
}

func (TRANSACTION_TYPE) Type() protoreflect.EnumType {
	return &file_sf_starknet_type_v1_block_proto_enumTypes[2]
}

func (x TRANSACTION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRANSACTION_TYPE.Descriptor instead.
func (TRANSACTION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{2}
}

type EXECUTION_STATUS int32

const (
	EXECUTION_STATUS_EXECUTION_STATUS_UNKNOWN  EXECUTION_STATUS = 0
	EXECUTION_STATUS_EXECUTION_STATUS_SUCCESS  EXECUTION_STATUS = 1
	EXECUTION_STATUS_EXECUTION_STATUS_REVERTED EXECUTION_STATUS = 2
)

// Enum value maps for EXECUTION_STATUS.
var (
	EXECUTION_STATUS_name = map[int32]string{
		0: "EXECUTION_STATUS_UNKNOWN",
		1: "EXECUTION_STATUS_SUCCESS",
		2: "EXECUTION_STATUS_REVERTED",
	}
	EXECUTION_STATUS_value = map[string]int32{
		"EXECUTION_STATUS_UNKNOWN":  0,
		"EXECUTION_STATUS_SUCCESS":  1,
		"EXECUTION_STATUS_REVERTED": 2,
	}
)

func (x EXECUTION_STATUS) Enum() *EXECUTION_STATUS {
	p := new(EXECUTION_STATUS)
	*p = x
	return p
}

func (x EXECUTION_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EXECUTION_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_starknet_type_v1_block_proto_enumTypes[3].Descriptor()
}

func (EXECUTION_STATUS) Type() protoreflect.EnumType {
	return &file_sf_starknet_type_v1_block_proto_enumTypes[3]
}

func (x EXECUTION_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EXECUTION_STATUS.Descriptor instead.
func (EXECUTION_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{3}
}

type Block struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	BlockHash []byte                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The hash of this block's parent
	ParentHash  []byte `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	BlockNumber uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// The new global state root
	NewRoot []byte `protobuf:"bytes,4,opt,name=new_root,json=newRoot,proto3" json:"new_root,omitempty"`
	// The time in which the block was created
	Timestamp uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The StarkNet identity of the sequencer submitting this block
	SequencerAddress []byte `protobuf:"bytes,6,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"`
	// The price of l1 gas in the block
	L1GasPrice *ResourcePrice `protobuf:"bytes,7,opt,name=l1_gas_price,json=l1GasPrice,proto3" json:"l1_gas_price,omitempty"`
	// The price of l1 data gas in the block
	L1DataGasPrice *ResourcePrice `protobuf:"bytes,8,opt,name=l1_data_gas_price,json=l1DataGasPrice,proto3" json:"l1_data_gas_price,omitempty"`
	// specifies whether the data of this block is published via blob data or calldata
	L1DaMode L1_DA_MODE `protobuf:"varint,9,opt,name=l1_da_mode,json=l1DaMode,proto3,enum=sf.starknet.type.v1.L1_DA_MODE" json:"l1_da_mode,omitempty"`
	// Semver of the current Starknet protocol
	StarknetVersion string `protobuf:"bytes,10,opt,name=starknet_version,json=starknetVersion,proto3" json:"starknet_version,omitempty"`
	// The transactions in this block
	Transactions  []*TransactionWithReceipt `protobuf:"bytes,11,rep,name=transactions,proto3" json:"transactions,omitempty"`
	StateUpdate   *StateUpdate              `protobuf:"bytes,12,opt,name=state_update,json=stateUpdate,proto3" json:"state_update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Block) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *Block) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Block) GetNewRoot() []byte {
	if x != nil {
		return x.NewRoot
	}
	return nil
}

func (x *Block) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Block) GetSequencerAddress() []byte {
	if x != nil {
		return x.SequencerAddress
	}
	return nil
}

func (x *Block) GetL1GasPrice() *ResourcePrice {
	if x != nil {
		return x.L1GasPrice
	}
	return nil
}

func (x *Block) GetL1DataGasPrice() *ResourcePrice {
	if x != nil {
		return x.L1DataGasPrice
	}
	return nil
}

func (x *Block) GetL1DaMode() L1_DA_MODE {
	if x != nil {
		return x.L1DaMode
	}
	return L1_DA_MODE_L1_DA_MODE_UNKNOWN
}

func (x *Block) GetStarknetVersion() string {
	if x != nil {
		return x.StarknetVersion
	}
	return ""
}

func (x *Block) GetTransactions() []*TransactionWithReceipt {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetStateUpdate() *StateUpdate {
	if x != nil {
		return x.StateUpdate
	}
	return nil
}

type ResourcePrice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PriceInFri    []byte                 `protobuf:"bytes,1,opt,name=price_in_fri,json=priceInFri,proto3" json:"price_in_fri,omitempty"`
	PriceInWei    []byte                 `protobuf:"bytes,2,opt,name=price_in_wei,json=priceInWei,proto3" json:"price_in_wei,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourcePrice) Reset() {
	*x = ResourcePrice{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePrice) ProtoMessage() {}

func (x *ResourcePrice) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePrice.ProtoReflect.Descriptor instead.
func (*ResourcePrice) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{1}
}

func (x *ResourcePrice) GetPriceInFri() []byte {
	if x != nil {
		return x.PriceInFri
	}
	return nil
}

func (x *ResourcePrice) GetPriceInWei() []byte {
	if x != nil {
		return x.PriceInWei
	}
	return nil
}

type TransactionWithReceipt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Transaction:
	//
	//	*TransactionWithReceipt_InvokeTransactionV0
	//	*TransactionWithReceipt_InvokeTransactionV1
	//	*TransactionWithReceipt_InvokeTransactionV3
	//	*TransactionWithReceipt_L1HandlerTransaction
	//	*TransactionWithReceipt_DeclareTransactionV0
	//	*TransactionWithReceipt_DeclareTransactionV1
	//	*TransactionWithReceipt_DeclareTransactionV2
	//	*TransactionWithReceipt_DeclareTransactionV3
	//	*TransactionWithReceipt_DeployTransactionV0
	//	*TransactionWithReceipt_DeployAccountTransactionV1
	//	*TransactionWithReceipt_DeployAccountTransactionV3
	Transaction   isTransactionWithReceipt_Transaction `protobuf_oneof:"transaction"`
	Receipt       *TransactionReceipt                  `protobuf:"bytes,12,opt,name=receipt,proto3" json:"receipt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionWithReceipt) Reset() {
	*x = TransactionWithReceipt{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionWithReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionWithReceipt) ProtoMessage() {}

func (x *TransactionWithReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionWithReceipt.ProtoReflect.Descriptor instead.
func (*TransactionWithReceipt) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionWithReceipt) GetTransaction() isTransactionWithReceipt_Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionWithReceipt) GetInvokeTransactionV0() *InvokeTransactionV0 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_InvokeTransactionV0); ok {
			return x.InvokeTransactionV0
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetInvokeTransactionV1() *InvokeTransactionV1 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_InvokeTransactionV1); ok {
			return x.InvokeTransactionV1
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetInvokeTransactionV3() *InvokeTransactionV3 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_InvokeTransactionV3); ok {
			return x.InvokeTransactionV3
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetL1HandlerTransaction() *L1HandlerTransaction {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_L1HandlerTransaction); ok {
			return x.L1HandlerTransaction
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV0() *DeclareTransactionV0 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeclareTransactionV0); ok {
			return x.DeclareTransactionV0
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV1() *DeclareTransactionV1 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeclareTransactionV1); ok {
			return x.DeclareTransactionV1
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV2() *DeclareTransactionV2 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeclareTransactionV2); ok {
			return x.DeclareTransactionV2
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeclareTransactionV3() *DeclareTransactionV3 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeclareTransactionV3); ok {
			return x.DeclareTransactionV3
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeployTransactionV0() *DeployTransactionV0 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeployTransactionV0); ok {
			return x.DeployTransactionV0
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeployAccountTransactionV1() *DeployAccountTransactionV1 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeployAccountTransactionV1); ok {
			return x.DeployAccountTransactionV1
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetDeployAccountTransactionV3() *DeployAccountTransactionV3 {
	if x != nil {
		if x, ok := x.Transaction.(*TransactionWithReceipt_DeployAccountTransactionV3); ok {
			return x.DeployAccountTransactionV3
		}
	}
	return nil
}

func (x *TransactionWithReceipt) GetReceipt() *TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type isTransactionWithReceipt_Transaction interface {
	isTransactionWithReceipt_Transaction()
}

type TransactionWithReceipt_InvokeTransactionV0 struct {
	InvokeTransactionV0 *InvokeTransactionV0 `protobuf:"bytes,1,opt,name=invoke_transaction_v0,json=invokeTransactionV0,proto3,oneof"`
}

type TransactionWithReceipt_InvokeTransactionV1 struct {
	InvokeTransactionV1 *InvokeTransactionV1 `protobuf:"bytes,2,opt,name=invoke_transaction_v1,json=invokeTransactionV1,proto3,oneof"`
}

type TransactionWithReceipt_InvokeTransactionV3 struct {
	InvokeTransactionV3 *InvokeTransactionV3 `protobuf:"bytes,3,opt,name=invoke_transaction_v3,json=invokeTransactionV3,proto3,oneof"`
}

type TransactionWithReceipt_L1HandlerTransaction struct {
	L1HandlerTransaction *L1HandlerTransaction `protobuf:"bytes,4,opt,name=l1_handler_transaction,json=l1HandlerTransaction,proto3,oneof"` //not versioned in api definition
}

type TransactionWithReceipt_DeclareTransactionV0 struct {
	DeclareTransactionV0 *DeclareTransactionV0 `protobuf:"bytes,5,opt,name=declare_transaction_v0,json=declareTransactionV0,proto3,oneof"`
}

type TransactionWithReceipt_DeclareTransactionV1 struct {
	DeclareTransactionV1 *DeclareTransactionV1 `protobuf:"bytes,6,opt,name=declare_transaction_v1,json=declareTransactionV1,proto3,oneof"`
}

type TransactionWithReceipt_DeclareTransactionV2 struct {
	DeclareTransactionV2 *DeclareTransactionV2 `protobuf:"bytes,7,opt,name=declare_transaction_v2,json=declareTransactionV2,proto3,oneof"`
}

type TransactionWithReceipt_DeclareTransactionV3 struct {
	DeclareTransactionV3 *DeclareTransactionV3 `protobuf:"bytes,8,opt,name=declare_transaction_v3,json=declareTransactionV3,proto3,oneof"`
}

type TransactionWithReceipt_DeployTransactionV0 struct {
	DeployTransactionV0 *DeployTransactionV0 `protobuf:"bytes,9,opt,name=deploy_transaction_v0,json=deployTransactionV0,proto3,oneof"`
}

type TransactionWithReceipt_DeployAccountTransactionV1 struct {
	DeployAccountTransactionV1 *DeployAccountTransactionV1 `protobuf:"bytes,10,opt,name=deploy_account_transaction_v1,json=deployAccountTransactionV1,proto3,oneof"`
}

type TransactionWithReceipt_DeployAccountTransactionV3 struct {
	DeployAccountTransactionV3 *DeployAccountTransactionV3 `protobuf:"bytes,11,opt,name=deploy_account_transaction_v3,json=deployAccountTransactionV3,proto3,oneof"`
}

func (*TransactionWithReceipt_InvokeTransactionV0) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_InvokeTransactionV1) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_InvokeTransactionV3) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_L1HandlerTransaction) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV0) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV1) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV2) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeclareTransactionV3) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeployTransactionV0) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeployAccountTransactionV1) isTransactionWithReceipt_Transaction() {}

func (*TransactionWithReceipt_DeployAccountTransactionV3) isTransactionWithReceipt_Transaction() {}

type TransactionReceipt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash identifying the transaction
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	// The fee that was charged by the sequencer
	ActualFee *ActualFee `protobuf:"bytes,2,opt,name=actual_fee,json=actualFee,proto3" json:"actual_fee,omitempty"`
	// Execution status
	ExecutionStatus EXECUTION_STATUS `protobuf:"varint,3,opt,name=execution_status,json=executionStatus,proto3,enum=sf.starknet.type.v1.EXECUTION_STATUS" json:"execution_status,omitempty"`
	RevertReason    string           `protobuf:"bytes,4,opt,name=revert_reason,json=revertReason,proto3" json:"revert_reason,omitempty"`
	Type            TRANSACTION_TYPE `protobuf:"varint,5,opt,name=type,proto3,enum=sf.starknet.type.v1.TRANSACTION_TYPE" json:"type,omitempty"`
	// Messages sent
	MessageHash string `protobuf:"bytes,6,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	// The address of the deployed contract
	MessagesSent []*MessagesSent `protobuf:"bytes,7,rep,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	// The events emitted as part of this transaction
	Events []*Event `protobuf:"bytes,8,rep,name=events,proto3" json:"events,omitempty"`
	// The resources consumed by the transaction
	ExecutionResources *ExecutionResources `protobuf:"bytes,9,opt,name=execution_resources,json=executionResources,proto3" json:"execution_resources,omitempty"`
	// The message hash as it appears on the L1 core contract
	ContractAddress []byte `protobuf:"bytes,10,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionReceipt) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *TransactionReceipt) GetActualFee() *ActualFee {
	if x != nil {
		return x.ActualFee
	}
	return nil
}

func (x *TransactionReceipt) GetExecutionStatus() EXECUTION_STATUS {
	if x != nil {
		return x.ExecutionStatus
	}
	return EXECUTION_STATUS_EXECUTION_STATUS_UNKNOWN
}

func (x *TransactionReceipt) GetRevertReason() string {
	if x != nil {
		return x.RevertReason
	}
	return ""
}

func (x *TransactionReceipt) GetType() TRANSACTION_TYPE {
	if x != nil {
		return x.Type
	}
	return TRANSACTION_TYPE_TRANSACTION_TYPE_UNKNOWN
}

func (x *TransactionReceipt) GetMessageHash() string {
	if x != nil {
		return x.MessageHash
	}
	return ""
}

func (x *TransactionReceipt) GetMessagesSent() []*MessagesSent {
	if x != nil {
		return x.MessagesSent
	}
	return nil
}

func (x *TransactionReceipt) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TransactionReceipt) GetExecutionResources() *ExecutionResources {
	if x != nil {
		return x.ExecutionResources
	}
	return nil
}

func (x *TransactionReceipt) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

type MessagesSent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The address of the L2 contract sending the message
	FromAddress []byte `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// The target L1 address the message is sent to
	ToAddress []byte `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// The payload of the messageResourceBounds
	Payload       [][]byte `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessagesSent) Reset() {
	*x = MessagesSent{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagesSent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesSent) ProtoMessage() {}

func (x *MessagesSent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesSent.ProtoReflect.Descriptor instead.
func (*MessagesSent) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{4}
}

func (x *MessagesSent) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *MessagesSent) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *MessagesSent) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// From address
	FromAddress   []byte   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Keys          [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Data          [][]byte `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *Event) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Event) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExecutionResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of Cairo steps used
	Steps uint64 `protobuf:"varint,1,opt,name=steps,proto3" json:"steps,omitempty"`
	// The number of unused memory cells (each cell is roughly equivalent to a step)
	MemoryHoles uint64 `protobuf:"varint,2,opt,name=memory_holes,json=memoryHoles,proto3" json:"memory_holes,omitempty"`
	// The number of RANGE_CHECK builtin instances
	RangeCheckBuiltinApplications uint64 `protobuf:"varint,3,opt,name=range_check_builtin_applications,json=rangeCheckBuiltinApplications,proto3" json:"range_check_builtin_applications,omitempty"`
	// The number of Pedersen builtin instances
	PedersenBuiltinApplications uint64 `protobuf:"varint,4,opt,name=pedersen_builtin_applications,json=pedersenBuiltinApplications,proto3" json:"pedersen_builtin_applications,omitempty"`
	// The number of Poseidon builtin instances
	PoseidonBuiltinApplications uint64 `protobuf:"varint,5,opt,name=poseidon_builtin_applications,json=poseidonBuiltinApplications,proto3" json:"poseidon_builtin_applications,omitempty"`
	// the number of EC_OP builtin instances
	EcOpBuiltinApplications uint64 `protobuf:"varint,6,opt,name=ec_op_builtin_applications,json=ecOpBuiltinApplications,proto3" json:"ec_op_builtin_applications,omitempty"`
	// the number of ECDSA builtin instances
	EcdsaBuiltinApplications uint64 `protobuf:"varint,7,opt,name=ecdsa_builtin_applications,json=ecdsaBuiltinApplications,proto3" json:"ecdsa_builtin_applications,omitempty"`
	// the number of BITWISE builtin instances
	BitwiseBuiltinApplications uint64 `protobuf:"varint,8,opt,name=bitwise_builtin_applications,json=bitwiseBuiltinApplications,proto3" json:"bitwise_builtin_applications,omitempty"`
	// The number of KECCAK builtin instances
	KeccakBuiltinApplications uint64 `protobuf:"varint,9,opt,name=keccak_builtin_applications,json=keccakBuiltinApplications,proto3" json:"keccak_builtin_applications,omitempty"`
	// The number of accesses to the segment arena
	SegmentArenaBuiltin uint64            `protobuf:"varint,10,opt,name=segment_arena_builtin,json=segmentArenaBuiltin,proto3" json:"segment_arena_builtin,omitempty"`
	DataAvailability    *DataAvailability `protobuf:"bytes,11,opt,name=data_availability,json=dataAvailability,proto3" json:"data_availability,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExecutionResources) Reset() {
	*x = ExecutionResources{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionResources) ProtoMessage() {}

func (x *ExecutionResources) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionResources.ProtoReflect.Descriptor instead.
func (*ExecutionResources) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{6}
}

func (x *ExecutionResources) GetSteps() uint64 {
	if x != nil {
		return x.Steps
	}
	return 0
}

func (x *ExecutionResources) GetMemoryHoles() uint64 {
	if x != nil {
		return x.MemoryHoles
	}
	return 0
}

func (x *ExecutionResources) GetRangeCheckBuiltinApplications() uint64 {
	if x != nil {
		return x.RangeCheckBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetPedersenBuiltinApplications() uint64 {
	if x != nil {
		return x.PedersenBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetPoseidonBuiltinApplications() uint64 {
	if x != nil {
		return x.PoseidonBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetEcOpBuiltinApplications() uint64 {
	if x != nil {
		return x.EcOpBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetEcdsaBuiltinApplications() uint64 {
	if x != nil {
		return x.EcdsaBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetBitwiseBuiltinApplications() uint64 {
	if x != nil {
		return x.BitwiseBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetKeccakBuiltinApplications() uint64 {
	if x != nil {
		return x.KeccakBuiltinApplications
	}
	return 0
}

func (x *ExecutionResources) GetSegmentArenaBuiltin() uint64 {
	if x != nil {
		return x.SegmentArenaBuiltin
	}
	return 0
}

func (x *ExecutionResources) GetDataAvailability() *DataAvailability {
	if x != nil {
		return x.DataAvailability
	}
	return nil
}

// invokes a specific function in the desired contract (not necessarily an account)
type InvokeTransactionV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximal fee that can be charged for including the transaction
	MaxFee []byte `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Version of the transaction scheme
	Version            string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Signature          [][]byte `protobuf:"bytes,4,rep,name=signature,proto3" json:"signature,omitempty"`
	ContractAddress    []byte   `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	EntryPointSelector []byte   `protobuf:"bytes,6,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	// The parameters passed to the function
	Calldata      [][]byte `protobuf:"bytes,7,rep,name=calldata,proto3" json:"calldata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeTransactionV0) Reset() {
	*x = InvokeTransactionV0{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeTransactionV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransactionV0) ProtoMessage() {}

func (x *InvokeTransactionV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransactionV0.ProtoReflect.Descriptor instead.
func (*InvokeTransactionV0) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{7}
}

func (x *InvokeTransactionV0) GetMaxFee() []byte {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *InvokeTransactionV0) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransactionV0) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransactionV0) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *InvokeTransactionV0) GetEntryPointSelector() []byte {
	if x != nil {
		return x.EntryPointSelector
	}
	return nil
}

func (x *InvokeTransactionV0) GetCalldata() [][]byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

// initiates a transaction from a given account
type InvokeTransactionV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximal fee that can be charged for including the transaction
	MaxFee []byte `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,3,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// sender address
	SenderAddress []byte `protobuf:"bytes,5,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The data expected by the account's `execute` function (in most usecases, this includes the called contract address and a function selector)
	Calldata      [][]byte `protobuf:"bytes,6,rep,name=calldata,proto3" json:"calldata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeTransactionV1) Reset() {
	*x = InvokeTransactionV1{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeTransactionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransactionV1) ProtoMessage() {}

func (x *InvokeTransactionV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransactionV1.ProtoReflect.Descriptor instead.
func (*InvokeTransactionV1) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{8}
}

func (x *InvokeTransactionV1) GetMaxFee() []byte {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *InvokeTransactionV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransactionV1) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransactionV1) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *InvokeTransactionV1) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *InvokeTransactionV1) GetCalldata() [][]byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

// initiates a transaction from a given account
type InvokeTransactionV3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderAddress []byte                 `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The data expected by the account's `execute` function (in most usecases, this includes the called contract address and a function selector)
	Calldata [][]byte `protobuf:"bytes,3,rep,name=calldata,proto3" json:"calldata,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// resource bounds for the transaction execution
	ResourceBounds *ResourceBounds `protobuf:"bytes,7,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	// the tip for the transaction
	Tip []byte `protobuf:"bytes,8,opt,name=tip,proto3" json:"tip,omitempty"`
	// data needed to allow the paymaster to pay for the transaction in native tokens
	PaymasterData [][]byte `protobuf:"bytes,9,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	// data needed to deploy the account contract from which this tx will be initiated
	AccountDeploymentData [][]byte `protobuf:"bytes,10,rep,name=account_deployment_data,json=accountDeploymentData,proto3" json:"account_deployment_data,omitempty"`
	// The storage domain of the account's nonce (an account has a nonce per DA mode)
	NonceDataAvailabilityMode FEE_DATA_AVAILABILITY_MODE `protobuf:"varint,11,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3,enum=sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE" json:"nonce_data_availability_mode,omitempty"`
	// The storage domain of the account's balance from which fee will be charged
	FeeDataAvailabilityMode FEE_DATA_AVAILABILITY_MODE `protobuf:"varint,12,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3,enum=sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE" json:"fee_data_availability_mode,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *InvokeTransactionV3) Reset() {
	*x = InvokeTransactionV3{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeTransactionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeTransactionV3) ProtoMessage() {}

func (x *InvokeTransactionV3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeTransactionV3.ProtoReflect.Descriptor instead.
func (*InvokeTransactionV3) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{9}
}

func (x *InvokeTransactionV3) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *InvokeTransactionV3) GetCalldata() [][]byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *InvokeTransactionV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InvokeTransactionV3) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *InvokeTransactionV3) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *InvokeTransactionV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *InvokeTransactionV3) GetTip() []byte {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *InvokeTransactionV3) GetPaymasterData() [][]byte {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *InvokeTransactionV3) GetAccountDeploymentData() [][]byte {
	if x != nil {
		return x.AccountDeploymentData
	}
	return nil
}

func (x *InvokeTransactionV3) GetNonceDataAvailabilityMode() FEE_DATA_AVAILABILITY_MODE {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN
}

func (x *InvokeTransactionV3) GetFeeDataAvailabilityMode() FEE_DATA_AVAILABILITY_MODE {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN
}

// a call to an l1_handler on an L2 contract induced by a message from L1
type L1HandlerTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the transaction scheme
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Version of the transaction scheme
	Nonce string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The address of the contract whose class hash will be returned
	ContractAddress []byte `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Entry point selector
	EntryPointSelector []byte `protobuf:"bytes,5,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	// The parameters passed to the function
	Calldata      [][]byte `protobuf:"bytes,6,rep,name=calldata,proto3" json:"calldata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *L1HandlerTransaction) Reset() {
	*x = L1HandlerTransaction{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L1HandlerTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1HandlerTransaction) ProtoMessage() {}

func (x *L1HandlerTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1HandlerTransaction.ProtoReflect.Descriptor instead.
func (*L1HandlerTransaction) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{10}
}

func (x *L1HandlerTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *L1HandlerTransaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *L1HandlerTransaction) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *L1HandlerTransaction) GetEntryPointSelector() []byte {
	if x != nil {
		return x.EntryPointSelector
	}
	return nil
}

func (x *L1HandlerTransaction) GetCalldata() [][]byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

// Declare Contract Transaction V0
type DeclareTransactionV0 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderAddress []byte                 `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The maximal fee that can be charged for including the transaction
	MaxFee []byte `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	// The hash of the requested contract class
	ClassHash     []byte `protobuf:"bytes,6,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareTransactionV0) Reset() {
	*x = DeclareTransactionV0{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareTransactionV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV0) ProtoMessage() {}

func (x *DeclareTransactionV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV0.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV0) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{11}
}

func (x *DeclareTransactionV0) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *DeclareTransactionV0) GetMaxFee() []byte {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *DeclareTransactionV0) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV0) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV0) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

// Declare Contract Transaction V1
type DeclareTransactionV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderAddress []byte                 `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The maximal fee that can be charged for including the transaction
	MaxFee []byte `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The hash of the requested contract class
	ClassHash     []byte `protobuf:"bytes,7,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareTransactionV1) Reset() {
	*x = DeclareTransactionV1{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareTransactionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV1) ProtoMessage() {}

func (x *DeclareTransactionV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV1.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV1) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{12}
}

func (x *DeclareTransactionV1) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *DeclareTransactionV1) GetMaxFee() []byte {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *DeclareTransactionV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV1) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV1) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeclareTransactionV1) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

// Declare Contract Transaction V2
type DeclareTransactionV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderAddress []byte                 `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The maximal fee that can be charged for including the transaction
	CompiledClassHash []byte `protobuf:"bytes,2,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
	MaxFee            []byte `protobuf:"bytes,3,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The hash of the requested contract class
	ClassHash     []byte `protobuf:"bytes,7,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareTransactionV2) Reset() {
	*x = DeclareTransactionV2{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareTransactionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV2) ProtoMessage() {}

func (x *DeclareTransactionV2) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV2.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV2) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{13}
}

func (x *DeclareTransactionV2) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *DeclareTransactionV2) GetCompiledClassHash() []byte {
	if x != nil {
		return x.CompiledClassHash
	}
	return nil
}

func (x *DeclareTransactionV2) GetMaxFee() []byte {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *DeclareTransactionV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV2) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV2) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeclareTransactionV2) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

// Declare Contract Transaction V3
type DeclareTransactionV3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderAddress []byte                 `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// The hash of the Cairo assembly resulting from the Sierra compilation
	CompiledClassHash []byte `protobuf:"bytes,3,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,5,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The hash of the requested contract class
	ClassHash []byte `protobuf:"bytes,7,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	// resource bounds for the transaction execution
	ResourceBounds *ResourceBounds `protobuf:"bytes,8,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	// the tip for the transaction
	Tip []byte `protobuf:"bytes,9,opt,name=tip,proto3" json:"tip,omitempty"`
	// data needed to allow the paymaster to pay for the transaction in native tokens
	PaymasterData [][]byte `protobuf:"bytes,10,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	// data needed to deploy the account contract from which this tx will be initiated
	AccountDeploymentData [][]byte `protobuf:"bytes,11,rep,name=account_deployment_data,json=accountDeploymentData,proto3" json:"account_deployment_data,omitempty"`
	// The storage domain of the account's nonce (an account has a nonce per DA mode)
	NonceDataAvailabilityMode FEE_DATA_AVAILABILITY_MODE `protobuf:"varint,12,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3,enum=sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE" json:"nonce_data_availability_mode,omitempty"`
	// The storage domain of the account's balance from which fee will be charged
	FeeDataAvailabilityMode FEE_DATA_AVAILABILITY_MODE `protobuf:"varint,13,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3,enum=sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE" json:"fee_data_availability_mode,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeclareTransactionV3) Reset() {
	*x = DeclareTransactionV3{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareTransactionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareTransactionV3) ProtoMessage() {}

func (x *DeclareTransactionV3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareTransactionV3.ProtoReflect.Descriptor instead.
func (*DeclareTransactionV3) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{14}
}

func (x *DeclareTransactionV3) GetSenderAddress() []byte {
	if x != nil {
		return x.SenderAddress
	}
	return nil
}

func (x *DeclareTransactionV3) GetCompiledClassHash() []byte {
	if x != nil {
		return x.CompiledClassHash
	}
	return nil
}

func (x *DeclareTransactionV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeclareTransactionV3) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeclareTransactionV3) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeclareTransactionV3) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *DeclareTransactionV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *DeclareTransactionV3) GetTip() []byte {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *DeclareTransactionV3) GetPaymasterData() [][]byte {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *DeclareTransactionV3) GetAccountDeploymentData() [][]byte {
	if x != nil {
		return x.AccountDeploymentData
	}
	return nil
}

func (x *DeclareTransactionV3) GetNonceDataAvailabilityMode() FEE_DATA_AVAILABILITY_MODE {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN
}

func (x *DeclareTransactionV3) GetFeeDataAvailabilityMode() FEE_DATA_AVAILABILITY_MODE {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN
}

// deploys a new account contract
type DeployTransactionV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the deployed contract's class
	ClassHash []byte `protobuf:"bytes,1,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	// Version of the transaction scheme
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The salt for the address of the deployed contract
	ContractAddressSalt []byte `protobuf:"bytes,3,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	// The parameters passed to the constructor
	ConstructorCalldata [][]byte `protobuf:"bytes,4,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeployTransactionV0) Reset() {
	*x = DeployTransactionV0{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployTransactionV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTransactionV0) ProtoMessage() {}

func (x *DeployTransactionV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTransactionV0.ProtoReflect.Descriptor instead.
func (*DeployTransactionV0) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{15}
}

func (x *DeployTransactionV0) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *DeployTransactionV0) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployTransactionV0) GetContractAddressSalt() []byte {
	if x != nil {
		return x.ContractAddressSalt
	}
	return nil
}

func (x *DeployTransactionV0) GetConstructorCalldata() [][]byte {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

// Deploys an account contract, charges fee from the pre-funded account addresses
type DeployAccountTransactionV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximal fee that can be charged for including the transaction
	MaxFee []byte `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,3,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The hash of the deployed contract's class
	ClassHash []byte `protobuf:"bytes,5,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	// The salt for the address of the deployed contract
	ContractAddressSalt []byte `protobuf:"bytes,6,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	// The parameters passed to the constructor
	ConstructorCalldata [][]byte `protobuf:"bytes,7,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeployAccountTransactionV1) Reset() {
	*x = DeployAccountTransactionV1{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployAccountTransactionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAccountTransactionV1) ProtoMessage() {}

func (x *DeployAccountTransactionV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAccountTransactionV1.ProtoReflect.Descriptor instead.
func (*DeployAccountTransactionV1) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{16}
}

func (x *DeployAccountTransactionV1) GetMaxFee() []byte {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployAccountTransactionV1) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetContractAddressSalt() []byte {
	if x != nil {
		return x.ContractAddressSalt
	}
	return nil
}

func (x *DeployAccountTransactionV1) GetConstructorCalldata() [][]byte {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

// Deploys an account contract, charges fee from the pre-funded account addresses
type DeployAccountTransactionV3 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the transaction scheme
	Version   string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Signature [][]byte `protobuf:"bytes,2,rep,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The salt for the address of the deployed contract
	ContractAddressSalt []byte `protobuf:"bytes,4,opt,name=contract_address_salt,json=contractAddressSalt,proto3" json:"contract_address_salt,omitempty"`
	// The parameters passed to the constructor
	ConstructorCalldata [][]byte `protobuf:"bytes,5,rep,name=constructor_calldata,json=constructorCalldata,proto3" json:"constructor_calldata,omitempty"`
	// The hash of the deployed contract's class
	ClassHash []byte `protobuf:"bytes,6,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	// resource bounds for the transaction execution
	ResourceBounds *ResourceBounds `protobuf:"bytes,7,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	// the tip for the transaction
	Tip []byte `protobuf:"bytes,8,opt,name=tip,proto3" json:"tip,omitempty"`
	// data needed to allow the paymaster to pay for the transaction in native tokens
	PaymasterData [][]byte `protobuf:"bytes,9,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	// The storage domain of the account's nonce (an account has a nonce per DA mode)
	NonceDataAvailabilityMode FEE_DATA_AVAILABILITY_MODE `protobuf:"varint,11,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3,enum=sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE" json:"nonce_data_availability_mode,omitempty"`
	// The storage domain of the account's balance from which fee will be charged
	FeeDataAvailabilityMode FEE_DATA_AVAILABILITY_MODE `protobuf:"varint,12,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3,enum=sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE" json:"fee_data_availability_mode,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeployAccountTransactionV3) Reset() {
	*x = DeployAccountTransactionV3{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployAccountTransactionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAccountTransactionV3) ProtoMessage() {}

func (x *DeployAccountTransactionV3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAccountTransactionV3.ProtoReflect.Descriptor instead.
func (*DeployAccountTransactionV3) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{17}
}

func (x *DeployAccountTransactionV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployAccountTransactionV3) GetSignature() [][]byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetContractAddressSalt() []byte {
	if x != nil {
		return x.ContractAddressSalt
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetConstructorCalldata() [][]byte {
	if x != nil {
		return x.ConstructorCalldata
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetTip() []byte {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetPaymasterData() [][]byte {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *DeployAccountTransactionV3) GetNonceDataAvailabilityMode() FEE_DATA_AVAILABILITY_MODE {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN
}

func (x *DeployAccountTransactionV3) GetFeeDataAvailabilityMode() FEE_DATA_AVAILABILITY_MODE {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return FEE_DATA_AVAILABILITY_MODE_FEE_DATA_AVAILABILITY_MODE_UNKNOWN
}

type ResourceBounds struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The max amount and max price per unit of L1 gas used in this tx
	L1Gas *Resource `protobuf:"bytes,1,opt,name=l1_gas,json=l1Gas,proto3" json:"l1_gas,omitempty"`
	// The max amount and max price per unit of L2 gas used in this tx
	L2Gas         *Resource `protobuf:"bytes,2,opt,name=l2_gas,json=l2Gas,proto3" json:"l2_gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceBounds) Reset() {
	*x = ResourceBounds{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceBounds) ProtoMessage() {}

func (x *ResourceBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceBounds.ProtoReflect.Descriptor instead.
func (*ResourceBounds) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceBounds) GetL1Gas() *Resource {
	if x != nil {
		return x.L1Gas
	}
	return nil
}

func (x *ResourceBounds) GetL2Gas() *Resource {
	if x != nil {
		return x.L2Gas
	}
	return nil
}

type Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the max amount of the resource that can be used in the tx
	MaxAmount string `protobuf:"bytes,1,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// the max price per unit of this resource for this tx
	MaxPricePerUnit string `protobuf:"bytes,2,opt,name=max_price_per_unit,json=maxPricePerUnit,proto3" json:"max_price_per_unit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{19}
}

func (x *Resource) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

func (x *Resource) GetMaxPricePerUnit() string {
	if x != nil {
		return x.MaxPricePerUnit
	}
	return ""
}

type Receipt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The fee that was charged by the sequencer
	ActualFee     *ActualFee `protobuf:"bytes,1,opt,name=actual_fee,json=actualFee,proto3" json:"actual_fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{20}
}

func (x *Receipt) GetActualFee() *ActualFee {
	if x != nil {
		return x.ActualFee
	}
	return nil
}

type ActualFee struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// amount paid
	Amount []byte `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// units in which the fee is given
	Unit          string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActualFee) Reset() {
	*x = ActualFee{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActualFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActualFee) ProtoMessage() {}

func (x *ActualFee) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActualFee.ProtoReflect.Descriptor instead.
func (*ActualFee) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{21}
}

func (x *ActualFee) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ActualFee) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type DataAvailability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the data gas consumed by this transaction's data, 0 if it uses gas for DA
	L1Gas uint64 `protobuf:"varint,1,opt,name=l1_gas,json=l1Gas,proto3" json:"l1_gas,omitempty"`
	// the gas consumed by this transaction's data, 0 if it uses data gas for DA
	L1DataGas     uint64 `protobuf:"varint,2,opt,name=l1_data_gas,json=l1DataGas,proto3" json:"l1_data_gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataAvailability) Reset() {
	*x = DataAvailability{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAvailability) ProtoMessage() {}

func (x *DataAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAvailability.ProtoReflect.Descriptor instead.
func (*DataAvailability) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{22}
}

func (x *DataAvailability) GetL1Gas() uint64 {
	if x != nil {
		return x.L1Gas
	}
	return 0
}

func (x *DataAvailability) GetL1DataGas() uint64 {
	if x != nil {
		return x.L1DataGas
	}
	return 0
}

// State update
type StateUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The new global state root
	NewRoot []byte `protobuf:"bytes,2,opt,name=new_root,json=newRoot,proto3" json:"new_root,omitempty"`
	// The previous global state root
	OldRoot []byte `protobuf:"bytes,1,opt,name=old_root,json=oldRoot,proto3" json:"old_root,omitempty"`
	// The change in state applied in this block, given as a mapping of addresses to the new values and/or new contracts
	StateDiff     *StateDiff `protobuf:"bytes,3,opt,name=state_diff,json=stateDiff,proto3" json:"state_diff,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateUpdate) Reset() {
	*x = StateUpdate{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdate) ProtoMessage() {}

func (x *StateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdate.ProtoReflect.Descriptor instead.
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{23}
}

func (x *StateUpdate) GetNewRoot() []byte {
	if x != nil {
		return x.NewRoot
	}
	return nil
}

func (x *StateUpdate) GetOldRoot() []byte {
	if x != nil {
		return x.OldRoot
	}
	return nil
}

func (x *StateUpdate) GetStateDiff() *StateDiff {
	if x != nil {
		return x.StateDiff
	}
	return nil
}

// The change in state applied in this block, given as a mapping of addresses to the new values and/or new contracts
type StateDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The changes in the storage per contract address
	StorageDiffs []*ContractStorageDiff `protobuf:"bytes,1,rep,name=storage_diffs,json=storageDiffs,proto3" json:"storage_diffs,omitempty"`
	// The hash of the declared class
	DeprecatedDeclaredClasses [][]byte `protobuf:"bytes,2,rep,name=deprecated_declared_classes,json=deprecatedDeclaredClasses,proto3" json:"deprecated_declared_classes,omitempty"`
	// The declared class hash and compiled class hash
	DeclaredClasses []*DeclaredClass `protobuf:"bytes,3,rep,name=declared_classes,json=declaredClasses,proto3" json:"declared_classes,omitempty"`
	// A new contract deployed as part of the state update
	DeployedContracts []*DeployedContract `protobuf:"bytes,4,rep,name=deployed_contracts,json=deployedContracts,proto3" json:"deployed_contracts,omitempty"`
	// The list of contracts whose class was replaced
	ReplacedClasses []*ReplacedClass `protobuf:"bytes,5,rep,name=replaced_classes,json=replacedClasses,proto3" json:"replaced_classes,omitempty"`
	// The updated nonce per contract address
	Nonces        []*NonceDiff `protobuf:"bytes,6,rep,name=nonces,proto3" json:"nonces,omitempty"` //Do we need this?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateDiff) Reset() {
	*x = StateDiff{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiff) ProtoMessage() {}

func (x *StateDiff) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiff.ProtoReflect.Descriptor instead.
func (*StateDiff) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{24}
}

func (x *StateDiff) GetStorageDiffs() []*ContractStorageDiff {
	if x != nil {
		return x.StorageDiffs
	}
	return nil
}

func (x *StateDiff) GetDeprecatedDeclaredClasses() [][]byte {
	if x != nil {
		return x.DeprecatedDeclaredClasses
	}
	return nil
}

func (x *StateDiff) GetDeclaredClasses() []*DeclaredClass {
	if x != nil {
		return x.DeclaredClasses
	}
	return nil
}

func (x *StateDiff) GetDeployedContracts() []*DeployedContract {
	if x != nil {
		return x.DeployedContracts
	}
	return nil
}

func (x *StateDiff) GetReplacedClasses() []*ReplacedClass {
	if x != nil {
		return x.ReplacedClasses
	}
	return nil
}

func (x *StateDiff) GetNonces() []*NonceDiff {
	if x != nil {
		return x.Nonces
	}
	return nil
}

type NonceDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "The address of the contract
	ContractAddress []byte `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// The nonce for the given address at the end of the block
	Nonce         []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceDiff) Reset() {
	*x = NonceDiff{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceDiff) ProtoMessage() {}

func (x *NonceDiff) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceDiff.ProtoReflect.Descriptor instead.
func (*NonceDiff) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{25}
}

func (x *NonceDiff) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *NonceDiff) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type ReplacedClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The address of the contract whose class was replaced
	ContractAddress []byte `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// The new class hash
	ClassHash     []byte `protobuf:"bytes,2,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplacedClass) Reset() {
	*x = ReplacedClass{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplacedClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplacedClass) ProtoMessage() {}

func (x *ReplacedClass) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplacedClass.ProtoReflect.Descriptor instead.
func (*ReplacedClass) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{26}
}

func (x *ReplacedClass) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *ReplacedClass) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

type DeployedContract struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The address of the contract
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The hash of the contract code
	ClassHash     []byte `protobuf:"bytes,2,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployedContract) Reset() {
	*x = DeployedContract{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployedContract) ProtoMessage() {}

func (x *DeployedContract) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployedContract.ProtoReflect.Descriptor instead.
func (*DeployedContract) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{27}
}

func (x *DeployedContract) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DeployedContract) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

type DeclaredClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the declared class
	ClassHash []byte `protobuf:"bytes,1,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	// The Cairo assembly hash corresponding to the declared class
	CompiledClassHash []byte `protobuf:"bytes,2,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeclaredClass) Reset() {
	*x = DeclaredClass{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclaredClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclaredClass) ProtoMessage() {}

func (x *DeclaredClass) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclaredClass.ProtoReflect.Descriptor instead.
func (*DeclaredClass) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{28}
}

func (x *DeclaredClass) GetClassHash() []byte {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *DeclaredClass) GetCompiledClassHash() []byte {
	if x != nil {
		return x.CompiledClassHash
	}
	return nil
}

type ContractStorageDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The address of the contract
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The changes in the storage of the contract
	StorageEntries []*StorageEntries `protobuf:"bytes,2,rep,name=storage_entries,json=storageEntries,proto3" json:"storage_entries,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ContractStorageDiff) Reset() {
	*x = ContractStorageDiff{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractStorageDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStorageDiff) ProtoMessage() {}

func (x *ContractStorageDiff) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStorageDiff.ProtoReflect.Descriptor instead.
func (*ContractStorageDiff) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{29}
}

func (x *ContractStorageDiff) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractStorageDiff) GetStorageEntries() []*StorageEntries {
	if x != nil {
		return x.StorageEntries
	}
	return nil
}

type StorageEntries struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key of the changed value
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The new value applied to the given address
	Value         []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageEntries) Reset() {
	*x = StorageEntries{}
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageEntries) ProtoMessage() {}

func (x *StorageEntries) ProtoReflect() protoreflect.Message {
	mi := &file_sf_starknet_type_v1_block_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageEntries.ProtoReflect.Descriptor instead.
func (*StorageEntries) Descriptor() ([]byte, []int) {
	return file_sf_starknet_type_v1_block_proto_rawDescGZIP(), []int{30}
}

func (x *StorageEntries) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StorageEntries) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_sf_starknet_type_v1_block_proto protoreflect.FileDescriptor

var file_sf_starknet_type_v1_block_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x73, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x04, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x6c, 0x31,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x4d, 0x0a, 0x11, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x0e, 0x6c, 0x31, 0x44, 0x61, 0x74, 0x61, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x5f, 0x44, 0x41, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x08, 0x6c, 0x31, 0x44, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x53, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x46,
	0x72, 0x69, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77,
	0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x57, 0x65, 0x69, 0x22, 0xc5, 0x09, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x5e, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12,
	0x5e, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12,
	0x5e, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12,
	0x61, 0x0a, 0x16, 0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x31,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x30, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x48, 0x00, 0x52,
	0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x61, 0x0a, 0x16, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x5e,
	0x0a, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x74,
	0x0a, 0x1d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x31, 0x12, 0x74, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x48, 0x00, 0x52, 0x1a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x04, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3d,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x50, 0x0a,
	0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x58,
	0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x52, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xa3, 0x05, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x1d,
	0x70, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x70, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x1d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x6f,
	0x6e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x65, 0x63, 0x4f, 0x70, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x65, 0x63, 0x64, 0x73, 0x61, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x40, 0x0a, 0x1c, 0x62, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x62, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x52, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x30, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbf, 0x01, 0x0a, 0x13,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x04,
	0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x15,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x19, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x17, 0x66, 0x65,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xf3, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xf9, 0x04, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x69, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x70, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x45, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x6c, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x45, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x30, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x61, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74,
	0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd7, 0x04, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x61, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a,
	0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x6c, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05,
	0x6c, 0x31, 0x47, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x32, 0x5f, 0x67, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x6c, 0x32, 0x47, 0x61, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x22, 0x48, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3d,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x22, 0x37, 0x0a,
	0x09, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x49, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x31,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x31, 0x47, 0x61,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x31, 0x44, 0x61, 0x74, 0x61, 0x47, 0x61,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x22, 0xc6, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x19, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x4c, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x59, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5e, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x3c,
	0x0a, 0x0a, 0x4c, 0x31, 0x5f, 0x44, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x31, 0x5f, 0x44, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4c, 0x4c, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x1a,
	0x46, 0x45, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x45,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x32,
	0x10, 0x02, 0x2a, 0x79, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x31, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x6d, 0x0a,
	0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x4e, 0x5a, 0x4c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73,
	0x65, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x70, 0x62, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sf_starknet_type_v1_block_proto_rawDescOnce sync.Once
	file_sf_starknet_type_v1_block_proto_rawDescData []byte
)

func file_sf_starknet_type_v1_block_proto_rawDescGZIP() []byte {
	file_sf_starknet_type_v1_block_proto_rawDescOnce.Do(func() {
		file_sf_starknet_type_v1_block_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sf_starknet_type_v1_block_proto_rawDesc), len(file_sf_starknet_type_v1_block_proto_rawDesc)))
	})
	return file_sf_starknet_type_v1_block_proto_rawDescData
}

var file_sf_starknet_type_v1_block_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sf_starknet_type_v1_block_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_sf_starknet_type_v1_block_proto_goTypes = []any{
	(L1_DA_MODE)(0),                    // 0: sf.starknet.type.v1.L1_DA_MODE
	(FEE_DATA_AVAILABILITY_MODE)(0),    // 1: sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	(TRANSACTION_TYPE)(0),              // 2: sf.starknet.type.v1.TRANSACTION_TYPE
	(EXECUTION_STATUS)(0),              // 3: sf.starknet.type.v1.EXECUTION_STATUS
	(*Block)(nil),                      // 4: sf.starknet.type.v1.Block
	(*ResourcePrice)(nil),              // 5: sf.starknet.type.v1.ResourcePrice
	(*TransactionWithReceipt)(nil),     // 6: sf.starknet.type.v1.TransactionWithReceipt
	(*TransactionReceipt)(nil),         // 7: sf.starknet.type.v1.TransactionReceipt
	(*MessagesSent)(nil),               // 8: sf.starknet.type.v1.MessagesSent
	(*Event)(nil),                      // 9: sf.starknet.type.v1.Event
	(*ExecutionResources)(nil),         // 10: sf.starknet.type.v1.ExecutionResources
	(*InvokeTransactionV0)(nil),        // 11: sf.starknet.type.v1.InvokeTransactionV0
	(*InvokeTransactionV1)(nil),        // 12: sf.starknet.type.v1.InvokeTransactionV1
	(*InvokeTransactionV3)(nil),        // 13: sf.starknet.type.v1.InvokeTransactionV3
	(*L1HandlerTransaction)(nil),       // 14: sf.starknet.type.v1.L1HandlerTransaction
	(*DeclareTransactionV0)(nil),       // 15: sf.starknet.type.v1.DeclareTransactionV0
	(*DeclareTransactionV1)(nil),       // 16: sf.starknet.type.v1.DeclareTransactionV1
	(*DeclareTransactionV2)(nil),       // 17: sf.starknet.type.v1.DeclareTransactionV2
	(*DeclareTransactionV3)(nil),       // 18: sf.starknet.type.v1.DeclareTransactionV3
	(*DeployTransactionV0)(nil),        // 19: sf.starknet.type.v1.DeployTransactionV0
	(*DeployAccountTransactionV1)(nil), // 20: sf.starknet.type.v1.DeployAccountTransactionV1
	(*DeployAccountTransactionV3)(nil), // 21: sf.starknet.type.v1.DeployAccountTransactionV3
	(*ResourceBounds)(nil),             // 22: sf.starknet.type.v1.ResourceBounds
	(*Resource)(nil),                   // 23: sf.starknet.type.v1.Resource
	(*Receipt)(nil),                    // 24: sf.starknet.type.v1.Receipt
	(*ActualFee)(nil),                  // 25: sf.starknet.type.v1.ActualFee
	(*DataAvailability)(nil),           // 26: sf.starknet.type.v1.DataAvailability
	(*StateUpdate)(nil),                // 27: sf.starknet.type.v1.StateUpdate
	(*StateDiff)(nil),                  // 28: sf.starknet.type.v1.StateDiff
	(*NonceDiff)(nil),                  // 29: sf.starknet.type.v1.NonceDiff
	(*ReplacedClass)(nil),              // 30: sf.starknet.type.v1.ReplacedClass
	(*DeployedContract)(nil),           // 31: sf.starknet.type.v1.DeployedContract
	(*DeclaredClass)(nil),              // 32: sf.starknet.type.v1.DeclaredClass
	(*ContractStorageDiff)(nil),        // 33: sf.starknet.type.v1.ContractStorageDiff
	(*StorageEntries)(nil),             // 34: sf.starknet.type.v1.StorageEntries
}
var file_sf_starknet_type_v1_block_proto_depIdxs = []int32{
	5,  // 0: sf.starknet.type.v1.Block.l1_gas_price:type_name -> sf.starknet.type.v1.ResourcePrice
	5,  // 1: sf.starknet.type.v1.Block.l1_data_gas_price:type_name -> sf.starknet.type.v1.ResourcePrice
	0,  // 2: sf.starknet.type.v1.Block.l1_da_mode:type_name -> sf.starknet.type.v1.L1_DA_MODE
	6,  // 3: sf.starknet.type.v1.Block.transactions:type_name -> sf.starknet.type.v1.TransactionWithReceipt
	27, // 4: sf.starknet.type.v1.Block.state_update:type_name -> sf.starknet.type.v1.StateUpdate
	11, // 5: sf.starknet.type.v1.TransactionWithReceipt.invoke_transaction_v0:type_name -> sf.starknet.type.v1.InvokeTransactionV0
	12, // 6: sf.starknet.type.v1.TransactionWithReceipt.invoke_transaction_v1:type_name -> sf.starknet.type.v1.InvokeTransactionV1
	13, // 7: sf.starknet.type.v1.TransactionWithReceipt.invoke_transaction_v3:type_name -> sf.starknet.type.v1.InvokeTransactionV3
	14, // 8: sf.starknet.type.v1.TransactionWithReceipt.l1_handler_transaction:type_name -> sf.starknet.type.v1.L1HandlerTransaction
	15, // 9: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v0:type_name -> sf.starknet.type.v1.DeclareTransactionV0
	16, // 10: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v1:type_name -> sf.starknet.type.v1.DeclareTransactionV1
	17, // 11: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v2:type_name -> sf.starknet.type.v1.DeclareTransactionV2
	18, // 12: sf.starknet.type.v1.TransactionWithReceipt.declare_transaction_v3:type_name -> sf.starknet.type.v1.DeclareTransactionV3
	19, // 13: sf.starknet.type.v1.TransactionWithReceipt.deploy_transaction_v0:type_name -> sf.starknet.type.v1.DeployTransactionV0
	20, // 14: sf.starknet.type.v1.TransactionWithReceipt.deploy_account_transaction_v1:type_name -> sf.starknet.type.v1.DeployAccountTransactionV1
	21, // 15: sf.starknet.type.v1.TransactionWithReceipt.deploy_account_transaction_v3:type_name -> sf.starknet.type.v1.DeployAccountTransactionV3
	7,  // 16: sf.starknet.type.v1.TransactionWithReceipt.receipt:type_name -> sf.starknet.type.v1.TransactionReceipt
	25, // 17: sf.starknet.type.v1.TransactionReceipt.actual_fee:type_name -> sf.starknet.type.v1.ActualFee
	3,  // 18: sf.starknet.type.v1.TransactionReceipt.execution_status:type_name -> sf.starknet.type.v1.EXECUTION_STATUS
	2,  // 19: sf.starknet.type.v1.TransactionReceipt.type:type_name -> sf.starknet.type.v1.TRANSACTION_TYPE
	8,  // 20: sf.starknet.type.v1.TransactionReceipt.messages_sent:type_name -> sf.starknet.type.v1.MessagesSent
	9,  // 21: sf.starknet.type.v1.TransactionReceipt.events:type_name -> sf.starknet.type.v1.Event
	10, // 22: sf.starknet.type.v1.TransactionReceipt.execution_resources:type_name -> sf.starknet.type.v1.ExecutionResources
	26, // 23: sf.starknet.type.v1.ExecutionResources.data_availability:type_name -> sf.starknet.type.v1.DataAvailability
	22, // 24: sf.starknet.type.v1.InvokeTransactionV3.resource_bounds:type_name -> sf.starknet.type.v1.ResourceBounds
	1,  // 25: sf.starknet.type.v1.InvokeTransactionV3.nonce_data_availability_mode:type_name -> sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	1,  // 26: sf.starknet.type.v1.InvokeTransactionV3.fee_data_availability_mode:type_name -> sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	22, // 27: sf.starknet.type.v1.DeclareTransactionV3.resource_bounds:type_name -> sf.starknet.type.v1.ResourceBounds
	1,  // 28: sf.starknet.type.v1.DeclareTransactionV3.nonce_data_availability_mode:type_name -> sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	1,  // 29: sf.starknet.type.v1.DeclareTransactionV3.fee_data_availability_mode:type_name -> sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	22, // 30: sf.starknet.type.v1.DeployAccountTransactionV3.resource_bounds:type_name -> sf.starknet.type.v1.ResourceBounds
	1,  // 31: sf.starknet.type.v1.DeployAccountTransactionV3.nonce_data_availability_mode:type_name -> sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	1,  // 32: sf.starknet.type.v1.DeployAccountTransactionV3.fee_data_availability_mode:type_name -> sf.starknet.type.v1.FEE_DATA_AVAILABILITY_MODE
	23, // 33: sf.starknet.type.v1.ResourceBounds.l1_gas:type_name -> sf.starknet.type.v1.Resource
	23, // 34: sf.starknet.type.v1.ResourceBounds.l2_gas:type_name -> sf.starknet.type.v1.Resource
	25, // 35: sf.starknet.type.v1.Receipt.actual_fee:type_name -> sf.starknet.type.v1.ActualFee
	28, // 36: sf.starknet.type.v1.StateUpdate.state_diff:type_name -> sf.starknet.type.v1.StateDiff
	33, // 37: sf.starknet.type.v1.StateDiff.storage_diffs:type_name -> sf.starknet.type.v1.ContractStorageDiff
	32, // 38: sf.starknet.type.v1.StateDiff.declared_classes:type_name -> sf.starknet.type.v1.DeclaredClass
	31, // 39: sf.starknet.type.v1.StateDiff.deployed_contracts:type_name -> sf.starknet.type.v1.DeployedContract
	30, // 40: sf.starknet.type.v1.StateDiff.replaced_classes:type_name -> sf.starknet.type.v1.ReplacedClass
	29, // 41: sf.starknet.type.v1.StateDiff.nonces:type_name -> sf.starknet.type.v1.NonceDiff
	34, // 42: sf.starknet.type.v1.ContractStorageDiff.storage_entries:type_name -> sf.starknet.type.v1.StorageEntries
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_sf_starknet_type_v1_block_proto_init() }
func file_sf_starknet_type_v1_block_proto_init() {
	if File_sf_starknet_type_v1_block_proto != nil {
		return
	}
	file_sf_starknet_type_v1_block_proto_msgTypes[2].OneofWrappers = []any{
		(*TransactionWithReceipt_InvokeTransactionV0)(nil),
		(*TransactionWithReceipt_InvokeTransactionV1)(nil),
		(*TransactionWithReceipt_InvokeTransactionV3)(nil),
		(*TransactionWithReceipt_L1HandlerTransaction)(nil),
		(*TransactionWithReceipt_DeclareTransactionV0)(nil),
		(*TransactionWithReceipt_DeclareTransactionV1)(nil),
		(*TransactionWithReceipt_DeclareTransactionV2)(nil),
		(*TransactionWithReceipt_DeclareTransactionV3)(nil),
		(*TransactionWithReceipt_DeployTransactionV0)(nil),
		(*TransactionWithReceipt_DeployAccountTransactionV1)(nil),
		(*TransactionWithReceipt_DeployAccountTransactionV3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sf_starknet_type_v1_block_proto_rawDesc), len(file_sf_starknet_type_v1_block_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_starknet_type_v1_block_proto_goTypes,
		DependencyIndexes: file_sf_starknet_type_v1_block_proto_depIdxs,
		EnumInfos:         file_sf_starknet_type_v1_block_proto_enumTypes,
		MessageInfos:      file_sf_starknet_type_v1_block_proto_msgTypes,
	}.Build()
	File_sf_starknet_type_v1_block_proto = out.File
	file_sf_starknet_type_v1_block_proto_goTypes = nil
	file_sf_starknet_type_v1_block_proto_depIdxs = nil
}
